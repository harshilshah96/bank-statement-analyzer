This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      parse-excel/
        route.ts
      submit/
        route.ts
    globals.css
    layout.tsx
    page.tsx
  components/
    StatementForm.tsx
.cursorindexingignore
.gitignore
.nvmrc
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/api/parse-excel/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import * as ExcelJS from 'exceljs';
import { Readable } from 'stream'; // Import Readable from stream

type KeywordPair = {
  keyword: string;
  value: string;
};

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData();
    const file = formData.get('statementFile') as File | null;

    if (!file) {
      return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });
    }

    // Check file type (optional but recommended)
    if (!['application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'text/csv'].includes(file.type)) {
       // Allow CSV as well, adjust mime types if needed
      // return NextResponse.json({ error: 'Invalid file type. Only Excel (.xlsx, .xls) or CSV (.csv) files are allowed.' }, { status: 400 });
    }

    const buffer = await file.arrayBuffer();
    const workbook = new ExcelJS.Workbook(); // Use ExcelJS.default.Workbook() if you encounter constructor issues

    // Determine if it's CSV or Excel and load accordingly
    if (file.type === 'text/csv') {
        // Create a readable stream from the buffer for CSV parsing
        const stream = Readable.from(Buffer.from(buffer));
        await workbook.csv.read(stream);
    } else {
        await workbook.xlsx.load(buffer);
    }


    const worksheet = workbook.getWorksheet(1); // Get the first worksheet
    if (!worksheet) {
        return NextResponse.json({ error: 'No worksheet found in the file' }, { status: 400 });
    }

    const keywords: KeywordPair[] = [];
    // Iterate over rows starting from the second row (index 2) to skip the header
    worksheet.eachRow({ includeEmpty: false }, (row, rowNumber) => {
      if (rowNumber > 1) { // Skip header row (rowNumber is 1-based)
        const keywordCell = row.getCell(1); // Column A: Statement
        const valueCell = row.getCell(2);   // Column B: Remarks

        const keyword = keywordCell.value ? String(keywordCell.value) : '';
        const value = valueCell.value ? String(valueCell.value) : '';

        if (keyword || value) { // Add row if at least one cell has content
            keywords.push({ keyword, value });
        }
      }
    });

    return NextResponse.json({ keywords });

  } catch (error) {
    console.error('Error parsing Excel file:', error);
    // Check for specific exceljs errors if needed
    return NextResponse.json({ error: 'Failed to parse Excel file' }, { status: 500 });
  }
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
</file>

<file path=".cursorindexingignore">
# Don't index SpecStory auto-save files, but allow explicit context inclusion via @ references
.specstory/**
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions
.specstory

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path=".nvmrc">
v22
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "bank-statement-analyzer",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/openai": "^1.3.16",
    "ai": "^4.3.9",
    "exceljs": "^4.4.0",
    "next": "15.3.1",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-hook-form": "^7.55.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.1",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/app/page.tsx">
import StatementForm from '@/components/StatementForm';

export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-start p-8 bg-gray-900 text-gray-100">
      <h1 className="text-3xl font-bold mb-8">Bank Statement Analyzer</h1>
      <StatementForm />
    </main>
  );
}
</file>

<file path="src/app/api/submit/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { openai } from '@ai-sdk/openai';
import { generateText } from 'ai';

// Ensure OPENAI_API_KEY is loaded (Vercel AI SDK reads it automatically)
// You might need to configure environment variables differently depending on deployment

type KeywordPair = {
    keyword: string;
    value: string;
};

type RequestData = {
    particulars: string;
    debit: number;
    credit: number;
    keywords: KeywordPair[];
};

export async function POST(request: NextRequest) {
    try {
        const data: RequestData = await request.json();
        
        // Validate required fields
        if (data.particulars === undefined) {
            return NextResponse.json({ error: 'Particulars field is missing' }, { status: 400 });
        }
        if (data.debit === undefined) {
            return NextResponse.json({ error: 'Debit field is missing' }, { status: 400 });
        }
        if (data.credit === undefined) {
            return NextResponse.json({ error: 'Credit field is missing' }, { status: 400 });
        }
        if (!Array.isArray(data.keywords)) {
            return NextResponse.json({ error: 'Keywords must be an array' }, { status: 400 });
        }

        let details = '';

        // Only process if there is actual transaction data
        if (!data.particulars && data.debit === 0 && data.credit === 0) {
            details = '';
        } else {
            try {
                const systemPrompt = `You are an assistant that categorizes bank statement transactions based on keywords and transaction type. 
Your task is to determine the 'Details' category for a given transaction.
Follow these rules precisely:
1. Examine the 'Particulars (Comment)' of the transaction.
2. Compare the 'Particulars (Comment)' semantically against the provided 'Keyword':'Value' pairs.
3. If you find a 'Keyword' that is semantically similar or a close match to the 'Particulars (Comment)', return the corresponding 'Value' exactly as provided.
4. If no semantic match is found with any keyword:
   a. Check if 'Debit amount' is greater than 0. If yes, return 'Personal expense'.
   b. If 'Debit amount' is 0 or less, check if 'Credit amount' is greater than 0. If yes, return 'Business income'.
   c. If neither 'Debit amount' nor 'Credit amount' is greater than 0, return 'Uncategorized'.
5. Respond ONLY with the determined category string ('Value' from keyword pair, 'Personal expense', 'Business income', or 'Uncategorized'). Do not add any explanation or introductory text.`;

                const userPrompt = `Transaction:
- Particulars (Comment): ${data.particulars}
- Debit amount: ${data.debit}
- Credit amount: ${data.credit}

Keyword List:
${data.keywords.map(kw => `- ${kw.keyword}: ${kw.value}`).join('\n')}

Determine the 'Details' category based *only* on the rules provided.`;

                const { text } = await generateText({
                    // Pass the provider and model ID directly
                    model: openai('gpt-4o-mini'),
                    system: systemPrompt,
                    prompt: userPrompt,
                });
                
                details = text.trim();
                console.log(`Processing details: ${details}`);

            } catch (aiError) {
                console.error(`AI processing error:`, aiError);
                return NextResponse.json({ error: 'AI processing failed' }, { status: 500 });
            }
        }

        return NextResponse.json({ details });

    } catch (error) {
        console.error('Error processing request:', error);
        // Provide a more specific error message if possible
        const errorMessage = error instanceof Error ? error.message : 'Failed to process request';
        return NextResponse.json({ error: `Server error: ${errorMessage}` }, { status: 500 });
    }
}
</file>

<file path="src/components/StatementForm.tsx">
'use client';

import React, { ChangeEvent, useState } from 'react';
import { useForm, useFieldArray, SubmitHandler } from 'react-hook-form';
import * as ExcelJS from 'exceljs';

type KeywordPair = { keyword: string; value: string };

type FormValues = {
  keywordsFile: FileList | null;
  bankStatementFile: FileList | null;
  keywords: KeywordPair[];
};

type ProcessedRow = {
  [key: string]: string | number | Date | null;
  details: string;
};

// Helper function to safely get cell value as string
function getCellValueAsString(cell: ExcelJS.Cell | undefined | null): string {
  if (!cell || cell.value === null || cell.value === undefined) {
    return '';
  }
  if (typeof cell.value === 'object' && 'richText' in cell.value) {
    // Handle RichTextValue
    return cell.value.richText.map(rt => rt.text).join('');
  }
  if (typeof cell.value === 'object' && 'result' in cell.value) {
    // Handle FormulaValue - use the calculated result
    return String(cell.value.result || '');
  }
  return String(cell.value);
}

// Helper function to get cell value as number
function getCellValueAsNumber(cell: ExcelJS.Cell | undefined | null): number {
  if (!cell || cell.value === null || cell.value === undefined) {
    return 0;
  }
  const num = Number(cell.value);
  return isNaN(num) ? 0 : num;
}

export default function StatementForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<'success' | 'error' | 'processing' | null>(null);
  const [submitMessage, setSubmitMessage] = useState<string>('');
  const [processedRows, setProcessedRows] = useState<ProcessedRow[]>([]);
  const [headers, setHeaders] = useState<string[]>([]);
  const [processedCount, setProcessedCount] = useState(0);
  const [totalRows, setTotalRows] = useState(0);
  
  const {
    register,
    control,
    handleSubmit,
    formState: { errors },
    reset,
    getValues,
  } = useForm<FormValues>({
    defaultValues: {
      keywordsFile: null,
      bankStatementFile: null,
      keywords: [{ keyword: '', value: '' }],
    },
  });

  const { fields } = useFieldArray({
    control,
    name: 'keywords',
  });

  const handleKeywordsFileChange = async (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files ? event.target.files[0] : null;
    setSubmitStatus(null);
    setSubmitMessage('');
    if (!file) {
      return;
    }

    const allowedTypes = [
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'text/csv'
    ];
    if (!allowedTypes.includes(file.type)) {
        alert('Invalid keywords file type. Please upload an Excel (.xlsx, .xls) or CSV (.csv) file.');
        event.target.value = '';
        reset({ ...getValues(), keywordsFile: null, keywords: [{ keyword: '', value: '' }] });
        return;
    }

    const formData = new FormData();
    formData.append('statementFile', file);

    try {
      const response = await fetch('/api/parse-excel', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `Failed to parse file: ${response.statusText}`);
      }

      const result = await response.json();

      if (result.keywords && Array.isArray(result.keywords)) {
        const currentValues = getValues();
        reset({
          ...currentValues,
          keywordsFile: event.target.files,
          keywords: result.keywords.length > 0 ? result.keywords : [{ keyword: '', value: '' }],
        });
      } else {
        console.warn('Parsed keywords data is not in the expected format:', result);
        reset({ ...getValues(), keywords: [{ keyword: '', value: '' }] });
      }

    } catch (error) {
      console.error('Error processing keywords file:', error);
      alert(`Error parsing keywords file: ${error instanceof Error ? error.message : 'Could not process file'}`);
      reset({ ...getValues(), keywordsFile: null, keywords: [{ keyword: '', value: '' }] });
      event.target.value = '';
    }
  };

  // Function to process a single row with API call
  const processRow = async (
    particulars: string, 
    debit: number, 
    credit: number, 
    keywords: KeywordPair[]
  ): Promise<string> => {
    try {
      const response = await fetch('/api/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          particulars,
          debit,
          credit,
          keywords,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `API error: ${response.statusText}`);
      }

      const result = await response.json();
      return result.details || 'Uncategorized';
    } catch (error) {
      console.error('Error processing row:', error);
      return 'Error Processing';
    }
  };

  const onSubmit: SubmitHandler<FormValues> = async (data) => {
    console.log("Submitting final form data:", data);
    setIsSubmitting(true);
    setSubmitStatus('processing');
    setSubmitMessage('Processing statement...');
    setProcessedRows([]);
    setHeaders([]);
    setProcessedCount(0);
    setTotalRows(0);

    if (!data.bankStatementFile || data.bankStatementFile.length === 0) {
      alert('Please upload the bank statement file.');
      setIsSubmitting(false);
      setSubmitStatus(null);
      return;
    }

    try {
      // Process the bank statement file on the client side
      const bankStatementFile = data.bankStatementFile[0];
      const inputWorkbook = new ExcelJS.Workbook();
      const buffer = await bankStatementFile.arrayBuffer();

      if (bankStatementFile.type === 'text/csv') {
        // Use string parsing for CSV in browser environment
        throw new Error('CSV files are not supported. Please upload an Excel (.xlsx) file instead.');
      } else {
        await inputWorkbook.xlsx.load(buffer);
      }

      const inputWorksheet = inputWorkbook.getWorksheet(1);
      if (!inputWorksheet) {
        throw new Error('No worksheet found in the bank statement file');
      }

      // Process Headers
      const headerRow = inputWorksheet.getRow(1);
      const headerValues: string[] = [];
      headerRow.eachCell((cell) => {
        headerValues.push(getCellValueAsString(cell));
      });
      headerValues.push('Details'); // Add the new Details header
      
      setHeaders(headerValues);
      setTotalRows(inputWorksheet.rowCount - 1); // Exclude header row
      
      // Create output workbook
      const outputWorkbook = new ExcelJS.Workbook();
      const outputWorksheet = outputWorkbook.addWorksheet('Processed Statement');
      
      // Add headers to output worksheet
      outputWorksheet.addRow(headerValues);
      outputWorksheet.getRow(1).font = { bold: true };

      // Process each row
      const allProcessedRows: ProcessedRow[] = [];
      
      for (let rowNumber = 2; rowNumber <= inputWorksheet.rowCount; rowNumber++) {
        const inputRow = inputWorksheet.getRow(rowNumber);
        
        // Assuming columns: Date[1], Particulars[2], Debit[3], Credit[4], Balance[5]
        // Adjust indices if your statement structure is different
        const particulars = getCellValueAsString(inputRow.getCell(2));
        const debit = getCellValueAsNumber(inputRow.getCell(3));
        const credit = getCellValueAsNumber(inputRow.getCell(4));
        
        // Create an object to store all cell values
        const rowData: ProcessedRow = {
          details: '',
        };
        
        // Add all original cell values to the row data
        inputRow.eachCell({ includeEmpty: true }, (cell, colNumber) => {
          const headerKey = headerValues[colNumber - 1];
          if (headerKey) {
            if (colNumber === 1) { // Date column
              rowData[headerKey] = cell.value as Date;
            } else if (colNumber === 3 || colNumber === 4) { // Debit/Credit columns
              rowData[headerKey] = getCellValueAsNumber(cell);
            } else {
              rowData[headerKey] = getCellValueAsString(cell);
            }
          }
        });
        
        // Process the row with AI if it has content
        if (!particulars && debit === 0 && credit === 0) {
          rowData.details = '';
        } else {
          // Make API call to process this row
          const details = await processRow(particulars, debit, credit, data.keywords);
          rowData.details = details;
        }
        
        // Add to processed rows and update state
        allProcessedRows.push(rowData);
        setProcessedRows([...allProcessedRows]);
        setProcessedCount(rowNumber - 1);
        
        // Add row to output worksheet
        const rowForExcel = headerValues.map((header, index) => {
          if (index === headerValues.length - 1) { // Details column
            return rowData.details;
          } else {
            return rowData[header] ?? '';
          }
        });
        
        outputWorksheet.addRow(rowForExcel);
      }
      
      // Generate Excel file for download
      const outputBuffer = await outputWorkbook.xlsx.writeBuffer();
      const blob = new Blob([outputBuffer], { 
        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' 
      });
      
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.style.display = 'none';
      a.href = url;
      a.download = 'processed_statement.xlsx';
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      setSubmitStatus('success');
      setSubmitMessage('Processing complete! Your download should start shortly.');
      
    } catch (error) {
      console.error('Error processing bank statement:', error);
      setSubmitStatus('error');
      setSubmitMessage(`Processing failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="space-y-6 p-4 max-w-4xl mx-auto">
      <form onSubmit={handleSubmit(onSubmit)} className="space-y-6 p-4 bg-gray-800 shadow-lg rounded-lg">
        <div>
          <label htmlFor="keywordsFile" className="block text-sm font-medium text-gray-300 mb-1">
            1. Upload Keywords (Excel or CSV)
          </label>
          <input
            id="keywordsFile"
            type="file"
            accept=".xlsx,.xls,.csv"
            {...register('keywordsFile', {
              onChange: handleKeywordsFileChange
              })}
            className="block w-full text-sm text-gray-300
                      file:mr-4 file:py-2 file:px-4
                      file:rounded-full file:border-0
                      file:text-sm file:font-semibold
                      file:bg-blue-700 file:text-white
                      hover:file:bg-blue-600
                      focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 focus:ring-offset-gray-800"
          />
          {errors.keywordsFile && <p className="mt-1 text-sm text-red-400">{errors.keywordsFile.message}</p>}
        </div>

        <div>
          <h3 className="text-lg font-medium text-gray-100 mb-2">Keywords (from file)</h3>
          <div className="max-h-60 overflow-y-auto pr-2">
            {fields.map((item, index) => (
              <div key={item.id} className="flex space-x-2 mb-2 items-center">
                <div className="flex-1">
                  <label htmlFor={`keywords.${index}.keyword`} className="sr-only">Keyword</label>
                  <input
                    id={`keywords.${index}.keyword`}
                    {...register(`keywords.${index}.keyword`, { required: 'Keyword is required' })}
                    placeholder="Keyword"
                    className="mt-1 block w-full px-3 py-2 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-gray-200 bg-gray-700 placeholder-gray-400"
                  />
                  {errors.keywords?.[index]?.keyword && <p className="mt-1 text-sm text-red-400">{errors.keywords[index]?.keyword?.message}</p>}
                </div>
                <div className="flex-1">
                  <label htmlFor={`keywords.${index}.value`} className="sr-only">Value</label>
                  <input
                    id={`keywords.${index}.value`}
                    {...register(`keywords.${index}.value`, { required: 'Value is required' })}
                    placeholder="Value"
                    className="mt-1 block w-full px-3 py-2 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm text-gray-200 bg-gray-700 placeholder-gray-400"
                  />
                  {errors.keywords?.[index]?.value && <p className="mt-1 text-sm text-red-400">{errors.keywords[index]?.value?.message}</p>}
                </div>
              </div>
            ))}
          </div>
        </div>

        <div>
          <label htmlFor="bankStatementFile" className="block text-sm font-medium text-gray-300 mb-1">
            2. Upload Bank Statement (Excel or CSV)
          </label>
          <input
            id="bankStatementFile"
            type="file"
            accept=".xlsx,.xls,.csv"
            {...register('bankStatementFile', { required: 'Bank statement file is required' })}
            className="block w-full text-sm text-gray-300
                      file:mr-4 file:py-2 file:px-4
                      file:rounded-full file:border-0
                      file:text-sm file:font-semibold
                      file:bg-green-700 file:text-white
                      hover:file:bg-green-600
                      focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 focus:ring-offset-gray-800
                      disabled:opacity-50 disabled:cursor-not-allowed"
            disabled={fields.length <= 1 && !fields[0]?.keyword}
          />
          {errors.bankStatementFile && <p className="mt-1 text-sm text-red-400">{errors.bankStatementFile.message}</p>}
          {fields.length <= 1 && !fields[0]?.keyword && <p className="mt-1 text-sm text-gray-500">Upload keywords file first.</p>}
        </div>

        <div>
          <button
            type="submit"
            className={`w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white ${isSubmitting ? 'bg-gray-600 cursor-not-allowed' : 'bg-indigo-600 hover:bg-indigo-700'} focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 focus:ring-offset-gray-800`}
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Processing...' : 'Process Statement & Download'}
          </button>
          {submitStatus === 'success' && <p className="mt-2 text-sm text-green-400">{submitMessage}</p>}
          {submitStatus === 'error' && <p className="mt-2 text-sm text-red-400">{submitMessage}</p>}
          {submitStatus === 'processing' && (
            <div className="mt-2">
              <p className="text-sm text-blue-400">{submitMessage}</p>
              <p className="text-xs text-gray-400">Processing row {processedCount} of {totalRows}</p>
              <div className="w-full bg-gray-700 rounded-full h-2.5 mt-1">
                <div
                  className="bg-blue-600 h-2.5 rounded-full"
                  style={{ width: `${totalRows ? (processedCount / totalRows) * 100 : 0}%` }}
                ></div>
              </div>
            </div>
          )}
        </div>
      </form>

      {/* Results Table */}
      {processedRows.length > 0 && (
        <div className="mt-6 p-4 bg-gray-800 shadow-lg rounded-lg overflow-x-auto">
          <h3 className="text-lg font-medium text-gray-100 mb-2">Processing Results</h3>
          <div className="max-h-[400px] overflow-y-auto relative">
            <table className="min-w-full divide-y divide-gray-700">
              <thead className="bg-gray-700 sticky top-0 z-10">
                <tr>
                  {headers.map((header, index) => (
                    <th 
                      key={index} 
                      className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider"
                    >
                      {header}
                    </th>
                  ))}
                </tr>
              </thead>
              <tbody className="bg-gray-800 divide-y divide-gray-700">
                {processedRows.map((row, rowIndex) => (
                  <tr key={rowIndex} className={rowIndex % 2 === 0 ? 'bg-gray-800' : 'bg-gray-750'}>
                    {headers.map((header, colIndex) => (
                      <td 
                        key={`${rowIndex}-${colIndex}`} 
                        className="px-6 py-4 whitespace-nowrap text-sm text-gray-300"
                      >
                        {header === 'Details' 
                          ? row.details 
                          : row[header] !== null && row[header] !== undefined 
                            ? String(row[header]) 
                            : ''}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
}
</file>

</files>
